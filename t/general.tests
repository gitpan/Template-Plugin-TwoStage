# include() with stash localization?
-- test --
[% USE TwoStage = TwoStage;
   TwoStage.purge; # we start with an empty cache
%]
[% SET change_me = 'before' %]
[% BLOCK test_localization %]
Hello
[* SET change_me = 'after' *]
[% END %]
[% TwoStage.include( 'template' => 'test_localization' ) %]
[% change_me %]
-- expect --
Hello
before

# process() with stash localization?
-- test --
[% USE TwoStage = TwoStage %]
[% SET change_me = 'before' %]
[% BLOCK test_localization %]
Hello
[* SET change_me = 'after' *]
[% END %]
[% TwoStage.process( 'template' => 'test_localization' ); %]
[% change_me %]
-- expect --
Hello
after

# disk caching ok?
-- test --
[% USE TwoStage = TwoStage %]
[% BLOCK test_localization %]
Disk caching not active.
[% END %]
[% TwoStage.process( 'template' => 'test_localization' ); %]
-- expect --
Hello

# alternate file scoped tag style?
-- test --
[% TAGS html %]
<!-- USE TwoStage = TwoStage;
     TwoStage.purge;
-->
<!-- BLOCK test_prec_tag_style -->
<!-- 'Hello ' -->
[* 'world!' *]
<!-- END;
     TwoStage.process( 'template' => 'test_prec_tag_style' ); -->
-- expect --
Hello world!

# test ttl option
-- test --
[% USE TwoStage = TwoStage;
   PERL
%]
sleep(2);
[% END;
   BLOCK test_prec_tag_style %]
ttl ok
[% END %]
[% TwoStage.process( 'template' => 'test_prec_tag_style', ttl => 1 ); %]
-- expect --
ttl ok

# test keys option
-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_keys;
	IF loggedIn;
	   	"You are logged in.\n";
	ELSE;
   		"You are NOT logged in.\n";
	END;
   END;
   loggedIn = 1;
   TwoStage.process( 'template' => 'test_keys', keys => { 'loggedIn' => 1 } ); 
   loggedIn = 0;
   TwoStage.process( 'template' => 'test_keys', keys => { 'loggedIn' => 0 } ); 
   loggedIn = 1;
   TwoStage.process( 'template' => 'test_keys', keys => { 'loggedIn' => 1 } ); 
   loggedIn = 0;
   TwoStage.process( 'template' => 'test_keys', keys => { 'loggedIn' => 0 } ); 
%]
-- expect --
You are logged in.
You are NOT logged in.
You are logged in.
You are NOT logged in.

# test namespace option
-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_namespace;
	"Namespace: preload\n";
   END;
   TwoStage.process( 'template' => 'test_namespace', namespace => 'preload' ); 
   TwoStage.process( 'template' => 'test_namespace', namespace => 'preload' ); 
%]
-- expect --
Namespace: preload
Namespace: preload

-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_namespace;
	"Namespace: no preload\n";
   END;
   TwoStage.process( 'template' => 'test_namespace', namespace => 'no preload' ); 
   TwoStage.process( 'template' => 'test_namespace', namespace => 'no preload' ); 
%]
-- expect --
Namespace: no preload
Namespace: no preload

# test runtime_tag_style option
-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_runtime_tag_style %]
<!-- foo -->
[% END;

   foo = "blub\n";
   TwoStage.process( 'template' => 'test_runtime_tag_style', runtime_tag_style => 'html' ); 
   foo = "bla\n";
   TwoStage.process( 'template' => 'test_runtime_tag_style', runtime_tag_style => 'html' ); 
%]
-- expect --
blub
bla

# test dev_mode option
-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_runtime_tag_style %]
<!-- foo; foo; -->
[% END;

   foo = "blub\n";
   TwoStage.process( 'template' => 'test_runtime_tag_style', runtime_tag_style => 'html', dev_mode => 1 ); 
   TwoStage.process( 'template' => 'test_runtime_tag_style', runtime_tag_style => 'html', dev_mode => 1 ); 
%]
-- expect --
blub
blub
blub
blub

# test 'template' method parameter in signature?
-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_template_a;
	"blub\n";	
   END;
   BLOCK test_template_b;
	"bla\n";	
   END;
   TwoStage.process( 'template' => 'test_template_a' ); 
   TwoStage.process( 'template' => 'test_template_b' ); 
   TwoStage.process( 'template' => 'test_template_a' ); 
   TwoStage.process( 'template' => 'test_template_b' ); 
%]
-- expect --
blub
bla
blub
bla

# TODO test 'component.name' in signature. Is it making 'template' parameter having file scope only?
-- test --
[% USE TwoStage = TwoStage; 
   BLOCK test_template_a;
	"blub\n";	
   END;
   BLOCK test_template_b;
	"bla\n";	
   END;
   # to this point component.name is something like 'input_text'
   TwoStage.process( 'template' => 'test_template_a' ); 
   TwoStage.process( 'template' => 'test_template_b' );
%]
-- expect --
blub
bla

-- test --
[% PROCESS test_file_scope.tt %]
-- expect --
bla
blub

# test 'dir_keys' in path (but none of those not being present in the 'keys' option)? 
-- test --
[% USE TwoStage = TwoStage( dev_mode => 1, dir_keys => [ 'bla', 'blub', 'foo' ] ); 
   BLOCK test_dir_keys;
	void;	
   END;
   TwoStage.process( 'template' => 'test_dir_keys', keys => { blub => 'blub', bla => 'bla' } );
   IF TwoStage.prec_template.rel_file_dir.match( 'bla' ) 
      && 
      TwoStage.prec_template.rel_file_dir.match( 'blub' ) 
      &&
      !TwoStage.prec_template.rel_file_dir.match( 'foo' ); 
   	'ok'; 
   END;
%]
-- expect --
ok

-- test --
[% USE TwoStage = TwoStage;
   TwoStage.purge;
%]
-- expect --
